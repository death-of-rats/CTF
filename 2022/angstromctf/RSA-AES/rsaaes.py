#!/usr/bin/env python3
from Crypto.Util.number import bytes_to_long, long_to_bytes, getStrongPrime
from Crypto.Util.Padding import pad
from Crypto.Random import get_random_bytes
from Crypto.Cipher import AES
#from secret import flag, d
e = 0x10001

flag = b'actf{I_just_test_my_solution}'
#p = getStrongPrime(1024)
#q = getStrongPrime(1024)
#n = p*q
#fi = (p-1)*(q-1)
#d = pow(e, -1, fi)
#print(f"{n=}")
#print(f"{d=}")

n=23100028007870325783185834854225420810294934833542002516071573559725954624158254241681531108254811992152391330196659130138562293154330788367194811021643366683965159626531673375163335903802878418922588761148831560375220232790576797320885239420328061465883494343484169205143945161452020074030236272423633651542587783663231883652666578166091932882621607201276775089510876377814861854076054384741632988719559243513691909274012936697373832908759138215954796841768884521430353724961486282715856244282784138169211412655478210437529819247752450082552313348995988653427767077759405830302351589964380906097867393519224077222417
d=6939842401192591121734987906752587245890061674132299121701225442382842067764039668652328699672383437043020475460305195741308771990106640404072487819172928981195203135431620566757570847154658791067135360456831173111795034307546371705310122204965732368002504236215569944917819495610553172064350244407722705726779950842939416856688350900937391297793156361970425401834222208765308134550815138084431002958641575681048362621060848707903209002223186224150428170316897580755806313761372979684359108114747048822425236542115249545967974464243439666000827897452100022638567865824970888498575221273968847274554834303990380428245
assert len(flag) < 256

#n = 0xbb7bbd6bb62e0cbbc776f9ceb974eca6f3d30295d31caf456d9bec9b98822de3cb941d3a40a0fba531212f338e7677eb2e3ac05ff28629f248d0bc9f98950ce7e5e637c9764bb7f0b53c2532f3ce47ecbe1205172f8644f28f039cae6f127ccf1137ac88d77605782abe4560ae3473d9fb93886625a6caa7f3a5180836f460c98bbc60df911637fa3f52556fa12a376e3f5f87b5956b705e4e42a30ca38c79e7cd94c9b53a7b4344f2e9de06057da350f3cd9bd84f9af28e137e5190cbe90f046f74ce22f4cd747a1cc9812a1e057b97de39f664ab045700c40c9ce16cf1742d992c99e3537663ede6673f53fbb2f3c28679fb747ab9db9753e692ed353e3551
assert pow(2,e*d,n)==2

enc = pow(bytes_to_long(flag),e,n)
print(enc)

k = get_random_bytes(32)
iv = get_random_bytes(16)
cipher = AES.new(k, AES.MODE_CBC, iv)

while 1:
	try:
		i = int(input("Enter message to sign: "))
		assert(0 < i < n)
		print("signed message (encrypted with military-grade aes-256-cbc encryption):")
		print(cipher.encrypt(pad(long_to_bytes(pow(i,d,n)),16)))
	except:
		print("bad input, exiting")
