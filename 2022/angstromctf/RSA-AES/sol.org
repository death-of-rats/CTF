#+author: death-of-rats
#+title: RSA-AES challenge
#+date: \today
#+LATEX_HEADER: \usepackage{amsfonts}
#+LATEX_HEADERL \usepackage{unicode-math}

Flaga i podstawowe dane do szyfrowania RSA:

#+BEGIN_SRC jupyter-python :session local :display plain
e = 0x10001
M = b"actf{to_tylko_test_f1@gi}D"
N=23100028007870325783185834854225420810294934833542002516071573559725954624158254241681531108254811992152391330196659130138562293154330788367194811021643366683965159626531673375163335903802878418922588761148831560375220232790576797320885239420328061465883494343484169205143945161452020074030236272423633651542587783663231883652666578166091932882621607201276775089510876377814861854076054384741632988719559243513691909274012936697373832908759138215954796841768884521430353724961486282715856244282784138169211412655478210437529819247752450082552313348995988653427767077759405830302351589964380906097867393519224077222417
d=6939842401192591121734987906752587245890061674132299121701225442382842067764039668652328699672383437043020475460305195741308771990106640404072487819172928981195203135431620566757570847154658791067135360456831173111795034307546371705310122204965732368002504236215569944917819495610553172064350244407722705726779950842939416856688350900937391297793156361970425401834222208765308134550815138084431002958641575681048362621060848707903209002223186224150428170316897580755806313761372979684359108114747048822425236542115249545967974464243439666000827897452100022638567865824970888498575221273968847274554834303990380428245

print(f"{M= }")
#+END_SRC

#+RESULTS:
: M= b'actf{to_tylko_test_f1@gi}D'

Zaszyfrowana flaga:

#+BEGIN_SRC jupyter-python :session local
from Crypto.Util.number import bytes_to_long, long_to_bytes
m = bytes_to_long(M)
c = pow(m, e, N)
print(f"{c= }")
#+END_SRC

#+RESULTS:
: c= 368725831735940876298430586324537291107277938680407321696723614006121419978668160558160318657351911169730568254611346102841554216275746908485114126101690110216212182317621333596145126885292719285114793170241366996277957322053521038193548059844927223793853017280898947685670737071777702633634937142247089739817024280435956995118305961629676893042380690672871294074780707710492611154186854379503277258100357901413414211892231390562270761968984141142306804448095539799790856932462923821004464714402450389883853940240333753152917386352533248676524958558429140371777849708491224455008594967387616194383580898330582175195


RSA Oracle.


#+BEGIN_SRC jupyter-python :session local
k = 0
kN = []
flag_size = m.bit_length()
prev_size = flag_size
print(f"{flag_size=}")
for i in range(flag_size):
    dm = pow(c*pow(2**(i+1),-e,N), d, N)
    new_len = dm.bit_length()
    if prev_size != new_len+1:
        k |= 1 << i
    kN.append(k)
    prev_size = new_len

f = 0
for i, ki in enumerate(kN):
    f +=  ((f+ki*N) % 2**(i+1))

print(long_to_bytes(f))

#+END_SRC

#+RESULTS:
: flag_size=207
: b'actf{to_tylko_test_f1@gi}D'


#+BEGIN_SRC jupyter-python :session local

from Crypto.Cipher import AES
from Crypto.Util.Padding import pad

k = long_to_bytes(0x54346545b56c9637c6528a6d0a0232872300436581c94a32b60a437e67113a41)
iv= long_to_bytes(0x54346545b56ac637c6538a6d0a023211)

aes = AES.new(k, AES.MODE_CBC, iv)

def encrypt(inp: int):
    tmp = pow(inp, d, N)
    msg = pad(long_to_bytes(tmp),16)
    return aes.encrypt(msg)

#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python :session local
def zero_iv():
    zero_msg_1 = 0x414141414141414141414141414141
    zero_msg_2 = bytes_to_long(encrypt(pow(zero_msg_1, e, N)))
    return encrypt(pow(zero_msg_2, e, N))[-16:]

max_msg = encrypt(pow(N-1,e,N))
max_length = len(max_msg)
print(f"{max_length}")

def calculate_flag_size():
    global max_length, c, e, N
    n_len = N.bit_length()//8
    for i in range(n_len):
        tmsg = encrypt(c*pow(2**(8*i),e,N))
        if len(tmsg) >= max_length:
            return (n_len - i, i)

flag_size, off = calculate_flag_size()
print(f"{flag_size=}")

search_size = 15 + 16*( (flag_size-15)//16+1 )
print(f"{search_size=}")
#+END_SRC

#+RESULTS:
: 272
: flag_size=26
: search_size=31

#+BEGIN_SRC jupyter-python :session local
from math import ceil

B = 2**8*(flag_size-1)
B_len = len(encrypt(pow(B,e,N)))
print(f"{B_len=}")

def testOracle(inp: int) -> bool:
    global B_len, c, N, e

    r = encrypt((pow(inp,e,N)*c) % N)
    return len(r) >= B_len

#+END_SRC

#+RESULTS:
: B_len=16


#+BEGIN_SRC jupyter-python :session local
# step 1 find i - bit offset so message*2^i is larger than B
f1i=1
for i in range((off-3)*8,(off-1)*8,1):
    if testOracle(2**i):
        f1i = 2**i
        break

f1i_2 = f1i // 2
print(f"{f1i_2=}")

#+END_SRC

#+RESULTS:
: f1i_2=2341219486162295467553672545010472015098914781544088360376510611093441520838996088132844976543374378191863098477967357466591297270396347639270225416616870748570373264191413288178087078215170330283648119746854179411597510502576849781491742150651151449772091204059435431687447747145676000987619467023267373953391874118750049672351700095466376952858948791227710261919374274258293557667255263314747632620783732091273068849000376827026300498227412883520120174482229804076618934247796774045878047998356281703015744784038078030946453768763877780271136768

#+BEGIN_SRC jupyter-python :session local

# step 2 find min f2j
f2j = f1i_2 * (N+B) // B
for j in range(N):
    if not testOracle(f2j):
        break
    f2j = f2j + f1i_2

print(f"{f2j=}")
#+END_SRC
#+BEGIN_SRC jupyter-python :session local
# step 3 - binary search

m_min = ceil(N / f2j)
m_max = (N+B) // f2j

while m_min != m_max:

    f_mid = 2*B // (m_max - m_min)
    m_mid = f_mid * m_min // N

    f3 = m_mid*N//m_min
    if testOracle(f3):
        m_min = ceil( (m_min * N + B) / f3 )
    else:
        m_max = (m_min * N + B) // f3

print(long_to_bytes(m_min))
#+END_SRC
#+RESULTS:
#+begin_example
1	427372d9dc6aa77ec708137f1433608b
2	4488f2fdedfaef1838c980e18a58503c
3	842cdbfca959c19fd29f8ed3223bfdd4
4	faa9f8380b6dcfd9e95d7cb0e103b603
5	728fc9e4b2833f721d01e17ef5b41a17
6	4eeb1ded5bd78f0f945bb723fde7046c
7	67e6fcb4e7ee96eac7487cb24d90a56a
8	851defdb4f61192883079179a794d210
9	d661e2aa17769c588e2e53b3543b2866
10	3b5d16b88a584ea7f2cb1c70cded46b6
11	2fafb3f35422270d04672c45c595592b
12	fdf5a3a30fa01d047ecf4234c10f20ef
13	71d0b2a94c576cf817751a913ca324fb
14	771080b002a846c853a27758d67c6981
15	a0e2d09a725f85a50ddc27befc80d26e
16	2db02509626b46018820559859c09eea
17	c046ec55d647c802df93b64c8f9ce401
18	b96cd8c9587b642c74c35ba062c18a4b
19	4a9587d8c3eaabe452f57b99ec58cb21
20	c0c270a4be4183ff78b0c2f4ae908cbb
21	bf70bd5a0ac469c55e185b2d96866e88
22	fdd5d8b53a16c32bd33d25e488e19063
23	5704f5900bfd243a840ee1d097826618
24	6069da4c890552cf8f9e1866707482f4
25	d0f41e8f2e9ff12202654ea756147ef7
26	106cd4baebcadf08dcf3fdd64ea60df5
27	2ef54ed42f8fdc4fd0b27dbcc4d38afe
28	51ba1252f1ce6b653267135ae0934ab7
29	c0694abf203ddb3c4106a640bb928124
30	41959e67cbe312fb2e25719361d70724
31	720eeee2613eae63c3a8d5af7036ae98
32	dbbdeb1d6d75e11086b7034bc892e4a0
33	0d9c7846642adc766ea1d040cd2fd1a3
34	21127121ef9e487fbdbf62cff888f55b
35	9b0b29a8313daf81419ba299b36d3669
36	aed353f28001842387402d278b16ca2c
37	909cb034ee6d546a844a846dff528776
38	0a63fe2415b8bf489f961fe6f8bc98ae
39	4c664c8d24a074b2b78fee9c3330210c
40	b373ef573ba9254df048a2a9f5ba23db
41	ebd0f6bea4de0e9931f47c5addd40595
42	78d2322241c29f44fed4eaca17bdcc59
43	0717f52ef43855f14abfbac5904c0e89
44	f3cebeab37cf92155aa1e76b3349103a
45	52e4a7d237c25835d499dff871d0d242
46	a75a597f6447759c7c48ab6ba6e7ba24
47	2eec5fa9b5f3bb22f64c8d38918f35f1
48	938a1ac09be9dbb42999fecb2243487d
49	ff4e04221af685e729208a4a9bf4404a
50	6866f6d2762178548e7fd544ca9b82a8
51	739e49366146f5794d4a16219604bf77
52	01519c2e98fc5ccf8786526ef0a16c02
53	6205b96e1465e00f52f1f50246a44dd5
54	9343c22e516f74ab2b11deecd67e98fd
55	e637f825f403b674957d2c2bba2e5089
56	b25b4d1428dc0589ebbe69163ce4376e
57	b91bbc7a90ce1264cf7227b2841ae3d7
58	b0c872f59cee18a9408cd0989ce7d3d4
59	0f03a9d66a2f0c1a08a325cd05b3f49f
60	493a494ec9afff29bccca8f0a55d636c
61	33c0b6fb8afd939eeb97cc5b649c734d
62	9b19d531b50f19f70f251bf27e3089af
63	628c9ce53a4c289ae7849596c1d5d004
64	c23e69aaa3a6272d8046d9f9ee091dc7
65	6b47f8b350519345ccba91027ac35057
66	7b387bdf04d23fd1de9f149c5d317d57
67	4c57a68a387fd4eb6ab6e961d857eac5
68	de5c7591eb1bfc315cf382cf85b9753b
69	c35d3266670f8eeceb959c4335abab6c
70	ae58745c26fa1a5aa6ebe50181757260
71	b06fd9e3763679a2e66424997ef7f06d
72	b4fced11b39bd9748b7c74e0fed98e8a
73	ecec20c33231c4a93f48f8da6b8e13cc
74	ce4ebfa0cbac6fad203f66b087e35e06
75	3ad23527a089fc4e81174a4b44682dfa
76	0fefa3c9cac7f5165dc0f08d6950c6c1
77	02f5128e954e5de5da75eaa323ac574e
78	d8b1b1d9fe17256026fa27e74e8ea42b
79	b1ea454ba5faf7d166bfcef29d0dcf40
80	8153fe05580fe553045aa515e281c869
81	912eda5cc9dda8727e0dac7420875847
82	a4288b273346fe96e3ef363798e7e9fa
83	23f6816bbca1084f358022b565a4ee9e
84	c4e0089dfb706b757a1527c4fe25ff9a
85	53b9ace082890828a0c1223ab5621398
86	11fb4972bc0014d894179e634e3bd49d
87	a48098d2f954abfd8717e6422495c8bf
88	de301499e02a11bdebe5d5aeb3476e1b
89	9b9901e51c7ab79d519e13b4b4a750c1
90	7f0eb6e966d21c03bc080888752a2489
91	05bbca292e741ccf30174748f09f59be
92	8e18e2a8e508aaf0aa4f4fb54db7a73f
93	87a14ba052dd5ac2e3b1c9861ee72b0f
94	24e49081d35952e1ba540b21a5cf56ed
95	ebce21213699ab77c96825ca2f533f52
96	96130b333ae6783f0d724d2001c382f8
97	dd11dc23986c7f9e34008c398e120f26
98	9400dc87ce9656939fdb1a3a169d56b7
99	8f8e7ca577b1d5e0e43c3c3e1e5f6ab0
100	074c429197ff118a2288b2813d64da7b
101	94856fa44ac61a3445f5a3e5fd7417aa
102	7e17afc5eee424db532de4740c441343
103	8f7a68345baa2877f03d7768ba02ccd1
104	71a2913f03276c8383010d3e06690e27
105	2d652b8517fcd03f3fb56fc49d5f968e
106	c7be27896ea62715d2b020d48d8c7bcf
107	66e1b7116490112f50f610620f768bb1
108	bf05a3a72e56c9b2faf48e9264804e25
109	833b8fe5ca113a7357eb76d222c3dfd6
110	e60c92d09029fc27548580bbb24383df
111	a8b3c898d5441d7add5df32f94450c59
112	25ea72196841f9d147959fabfe898661
113	63b8898514383e694361eeaaf4d5b195
114	729bb321b3a1eb4c6214226f678cd582
115	235262b99eb518bd1122064715399305
116	66586ee706aeb6a256042e646a0b9d60
117	304eea765843d27fa05b50a0380055f2
118	21799eb15092d1747167282031111d34
119	cc1cddc5d30c2e0a910ee442505ab18e
120	62f85d5064c7609597bac2a72a67702c
121	c757bd3512af06190956f4adb6f3514a
122	c067ca1d46886f9bee1dd1e17e12fb7d
123	da7d437f56c3e71958824651415d0e7f
124	d76fe718925eb29e250afb2e0d0719f5
125	e7e8710d764720feb9eb56019545dbca
126	801baf69e81fefdf371b6b272d1bea79
127	e956bd669c53bfa5573c8c3d3eaaac10
128	8b0f13835929719124c959c41dda26a2
129	9cefbbc0b996bca878ae4dca11f7f7cb
130	89491767b60b1e4a093b61f75fdbceb0
131	d109f83c7649a31f657002c887547f57
132	f3f92c3407ad1014bbdb401f5438cfac
133	33360fc124fc578d14e518cbf9c6f1f2
134	45c88d38e3462e8eb33c9149f55159ea
135	9db65741bfd07cc0007fb533c05cdeef
136	f8d0415692e5a23e79b2178f5ba8facf
137	ba3ed7189c3f13b92f9b315a0394a5f6
138	37701bdb89e80dae6ce1bdf7f76d9cb6
139	20d4824a7481a105f9aff7a485de5517
140	9f9269f898ca471a12286f019b0f1e8a
141	e85018d1c9b57f108497ec1d5072168a
142	18eaf9f731efd64f7495132b68f8676d
143	8f88a7e515f08f995b392c3aa6d60ed4
144	78c32d9e67ee4f7505618ed75ec49f3a
145	2cc0b617615a5a76196b70cf03c50045
146	146740c115033b92079db148eeb297a9
147	a85bc5bf4bee802301b05bbbb051a702
148	3f8b963e8fc19b6f1781029ddfd040e1
149	011a677f8e6f2a92406439dc9220d43b
150	124912feea67903b000667d5d3bf4b9c
151	b4dc754a0829860958e90147528ba6d4
152	87dcea1e7697336ff4e37eac962852fc
153	d96b21eb207fa825da7b4a6dd1307ec2
154	a6a6ef7a6f583d8c7b8d69e611516d8c
155	d17c1336a4ad468d8ff3a6756a2d4276
156	8c177adbf4ea2a6f026dc01fe45d1e17
157	2f8cf98073f04224829bfa8d7ea086c9
158	669cf207e052703f73747c5816722698
159	a6d84e3cea2499edd7f551f7f6b4134a
160	71e965aab2b853594c524c96306b17da
161	0f3a98c09abe9275aa6aa1ac10decdae
162	4b5f489d6761f5d2ceadd6c13ddb334b
163	64849200ea5bedfccd4b99292b91290e
164	2478b12746b13f8a7c7b6afa07fff1d4
165	4fc9bd68e7a0bfbc8df799e82ccbe701
166	4c0b9769e71d34d5079f863e636228d5
167	55c26f4b4722a658103d2c4a060cb86c
168	57152b9d2fb3f2ff75002ec21d412a7b
169	edbe222ae65b91b81f4a4a739384ea5d
170	fa1931a555845301941ab5af45f3ad71
171	e432b5436c6f68a71e71de698c9af0b1
172	c4da1ee4db57ed4e8d74b991ed428b40
173	deab92948dc651791e5111e1110529ee
174	30b226973cbafde5a6930070e5757c98
175	447586f27beefe0580630c0329f4629f
176	bec241326a9e616199821478bf6b980d
177	f97a0cb3b3a4b4fac69ff2a35630074e
178	f8c023066380e0363c86ffcb51fc4c87
179	c1649521e0d4f16dac72df73e262fc51
180	d0e36499fcfe39a600165b4d8d0b9bfb
181	8489c4957df4187488f2704f254172e4
182	81698cc4a35f8a767be755c434975c02
183	0fa2cbc670f22d1eb6050d3628c15e95
184	bb972a6f1a1f81ed25fbfb0e1c41972f
185	ab4d3d0c88c6ef273e6962df2fde1109
186	ac7f72ea1289eb471fc29bdc1b60a6b6
187	fe1b392e229b94e9cf79b5243b9f6df6
188	533da77dc4c3b1f5ced5bf42f98e0ccb
189	15238574c7fd705153ecb546abffd23f
190	1c18cef68c0605af908d9af923e7ed58
191	4e7810ecd46c1ded794e0816c223e78d
192	d43ad309f5098dbb551e74d3a547a231
193	0e9d325e875a607f40d7ccfd7cbef48a
194	c0a33458d74cf13230a9a5ee3cd3a36a
195	5ce14f4612a2c6f329882631d687fda4
196	dd4aad346bfbc0cbafea608ef0a7296c
197	597999e6beae17511810bd9c94fc5640
198	5ee3da5d05b5461c4f130ac0f30d0e21
199	3276e4c1d019f38a41413ee26cc25209
200	5dede26412084a431666ebe8076d88fd
201	4829a66f0f9b2fc68dea84a15c02f25d
202	3e9061fff8222f307181f21d86a4f366
203	28650da98c6337194b4c18cd3f6c6d56
204	222738b1af837045aa61a81f41866784
205	3615c80ece92a9e67fcfe884923850ef
206	6bd77b14377f8bd1de99e068bf41fada
207	8432b6f842ee49ae1a628cd30c826523
208	9d06bd3ceef9eb95abb581dda76a4f48
209	b6a4b310ff70ecd0c765e91b325e0848
210	b5bc43b937d934f59b7052d3ccc647b4
211	8e085e6edd343d330a85ae58e2a733ce
212	6a4ebff506557b735b066775c4da8ce8
213	f751a02a266bcee6369333046266c647
214	bec4d5ef9919efa6e4ddabfd586b5897
215	0a4212978f4b587695b641e6dbf0e6f3
216	f3fc34eddd5cb514f37c94a178c7157c
217	7577cb2670d802bd2bbe53dfe1693ea6
218	b3c273f7a0ae1ba6bb452e6c57c2fb02
219	bfce66101d8ea8ebd526aa765a2399c6
220	ed9ef1692faff5ae4e36b55e0e19f7b7
221	91da2f43cbafdac45dba1f3bf46c34e3
222	01dd69b6217d86d488428a64f399a373
223	7f6830c090ef2825f99aea71980cdcb2
224	ffa7e12680a17d836a4ca691a6d526a0
225	fe9df5f1177883b3151191eeecd4c9be
226	376db3246465fa73fa3825775934e30c
227	cb0e043670c43b49ea16a5d0ec7a2863
228	47aa7d94a362a6cec81362534127f372
229	75faa8b96fd8242fd3c01fb16df557f5
230	dabf16b1fb073fdb75c9f5913431edf6
231	a04bab08d4ed01d246416845a5496d6c
232	8d269ce0941d8971040eefef2eeaa244
233	4b3840b8c4ffa44904f4a23436a5d6d8
234	f54faf209e0fefc2a26e2a3745dfd2bb
235	0ad13acf39bfc69f75c27eb3d9da89e2
236	4b357716fe90a24aebc445fca8b61ab6
237	9c3f74e9952237054985425edb1ef01b
238	a2068861f80112c68c8c722ba6a23ffa
239	e5bd995f8b36f5ebcb18334d07851610
240	5cd031fba6065d19c108540709d5ec96
241	e13526c82cbeca7c29948b2885d5da0e
242	27d571e2be73dbd9f1e27e48f4db12f2
243	99c0b3df4cf54d58c144e787a4d45dad
244	102278701ef0967004cc3876650e47fa
245	1cd5cdf3334e9d5087df3a5e7c93524a
246	0322f24b924da4c93942a620ea5658b6
247	cb277677d43e62d5fc09c4a2ff97f91a
248	12da42a1dce0675c42e3661f62fd6927
249	b0cedf5e3ca56832711982b0189592d7
250	c181e95e20e5cf0f4d6c05a897bbd2b0
251	ec9035def85d27aa2aae51706a858db2
252	b7b7e1d36142527293fdac802c932d3b
253	7a529e26466e7424fec915df0a4d3bc3
254	680dc02d617cdf258e654d65829e37a9
255	64449dab72e1add1d2d475e6c0fdad32
#+end_example

#+BEGIN_SRC jupyter-python :session local

print(hex(0xb^0xc))

#+END_SRC

#+RESULTS:
: 0x7
